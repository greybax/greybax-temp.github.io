<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Javascript | Aleksandr Filatov]]></title>
  <link href="http://alfilatov.com/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://alfilatov.com/"/>
  <updated>2015-07-01T11:20:07+00:00</updated>
  <id>http://alfilatov.com/</id>
  <author>
    <name><![CDATA[Aleksandr Filatov]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Пробуем ES2015(ES6) в действии]]></title>
    <link href="http://alfilatov.com/blog/2015/06/29/probuiem-es2015-es6-v-dieistvii/"/>
    <updated>2015-06-29T12:49:59+00:00</updated>
    <id>http://alfilatov.com/blog/2015/06/29/probuiem-es2015-es6-v-dieistvii</id>
    <content type="html"><![CDATA[<p>Буквально на днях (17 июня) свершилось то, чего ждали почти 6 лет в мире Javascript. Генеральное собрание Ecma International <a href="http://www.ecma-international.org/news/index.html">официально одобрило</a> стандарт ECMA-262 6 версии, который является спецификацией языка ECMAScript 6 (ES6), который так же называют ECMAScript 2015. Предыдущий стандарт языка Javascript был одобрен в 2009 году (ES5).</p>

<p>Теперь дело за браузерами, которые начнут усиленно внедрять спецификацию языка в свои движки. Следить за поддержкой ES2015 удобно на сайте <a href="http://kangax.github.io/compat-table/es6/">kangax.github.io/compat-table/es6</a>.</p>

<h3>Некоторые термины:</h3>

<ul>
<li>ECMAScript — это официальный стандарт языка JavaScript.</li>
<li>TC39 — комитет, развивающий стандарт ECMAScript и принимающий решения по внедрению нового функционала.</li>
<li>Внутри самого ECMAScript <a href="http://www.ecma-international.org/publications/standards/Standard.htm">много стандартов</a>. Самый популярный из них — ECMA-262.</li>
</ul>


<h3>Немного истории</h3>

<ul>
<li>1995

<ul>
<li>Май - Brendan Eich реализовал Mocha в Nestcape</li>
<li>Сентябрь - Переименована в LiveScript</li>
<li>Декабрь - Переименован в JavaScript</li>
</ul>
</li>
<li>1996

<ul>
<li>JavaScript берет стандартизацию в ECMA. Сейчас ECMA - это спецификация. JavaScript это одна из реализаций это спецификации (ActionScript другая реализация)</li>
</ul>
</li>
<li>Первая версия стандарта ECMA-262 вышла в 1997 году (спустя год после разработки).</li>
<li>В июне 1998 года общим собранием ECMA была принята вторая редакция ECMA-262.</li>
<li>В декабре 1999 вышла третья редакция спецификации. Она отличалась от предыдущей введением поддержки регулярных выражений, улучшением поддержки строк, введением новых управляющих конструкций, механизма исключений, форматирования при численном вводе и некоторые другие изменения.</li>
<li>2005

<ul>
<li>Mozilla и Macromedia начали работу над ECMAScript 4. Было внесено очень много изменений и добавлено много новых фич. Douglas Crockford (Yahoo) и Microsoft выступили против формализации этого стандарта.</li>
<li>ECMAScript 3.1 стал компромисным решением. Внесено множество изменений в версию 3. Добавлен режим <code>strict mode</code>, добавлены новые фичи: get&#8217;еры и set&#8217;еры, поддержка JSON.</li>
</ul>
</li>
<li>В декабре 2009 состоялась встреча противоборствующих сторон в Осло, где было принято решение. ECMAScript 3.1 переименовали в ECMAScript 5. В знак мира и согласия новую версию стандарта JavaScript было решено назвать &ldquo;Harmony&rdquo;</li>
<li>5.1 версия cпецификации вышла в июне 2011, которая включает полную поддержку стандарта 3.0</li>
<li>Июнь 2015 - версия ECMAScript 6.0 или ECMAScript 2015. Реализовано большое количество новых фич, которые не вышли в стандарте 4.0. В этом издании внесены самые большие изменения за историю спецификации.</li>
</ul>


<p>Архив стандарта ECMA-262 можно посмотреть на <a href="http://www.ecma-international.org/publications/standards/Ecma-262-arch.htm">официальном сайте</a>.</p>

<h3>Обзор нововведений в ECMAScript 6:</h3>

<p>Здесь я постарался перечислить (с ссылкой на упоминания в спецификации) основные фичи который были приняты в финальной версии стандарта ECMAScript 2015.</p>

<ul>
<li><strong>Поддержка классов</strong> <a href="http://www.ecma-international.org/ecma-262/6.0/#sec-class-definitions">14.5</a>.</li>
<li><strong>Шаблоны строк</strong> <a href="http://www.ecma-international.org/ecma-262/6.0/#sec-template-literals">12.2.9</a>, <a href="http://www.ecma-international.org/ecma-262/6.0/#sec-tagged-templates">12.3.7</a>, предоставляющие удобные средства для форматирования строк.</li>
<li>Поддержка <strong>лексических объявлений переменных</strong> <a href="http://people.mozilla.org/~jorendorff/es6-draft.html#sec-let-and-const-declarations">13.2.1</a> (Lexical Declarations), позволяющих ограничить текущим блоком область видимости ключевых слов, через их повторное определение при помощи оператора <code>let</code> вместо <code>var</code></li>
<li><strong>Оператор const</strong> <a href="http://people.mozilla.org/~jorendorff/es6-draft.html#sec-let-and-const-declarations">13.2.1</a> для определения переменных, доступных только для чтения</li>
<li><strong>Модули</strong> <a href="http://www.ecma-international.org/ecma-262/6.0/#sec-modules">15.2</a>. Для экспорта и импорта модулей введены операторы export и import, например, <code>import * as mymodule from "lib/mymodule</code>. Предоставляются средства динамической загрузки модулей, пространства имён и изоляция состояния</li>
<li><strong>Arrow-функции</strong> <a href="http://www.ecma-international.org/ecma-262/6.0/#sec-arrow-function-definitions">14.2</a> (синтаксис <code>=&gt;</code>) для быстрого определения анонимных функций (например, <code>x.map(x =&gt; console.log(x * x));</code>)</li>
<li><strong>Сокращённый формат задания объектов</strong> (запись <code>var a = {'obj1': obj1, 'obj2': obj2}</code> теперь можно сократить до <code>var a = {obj1, obj2}</code> )</li>
<li>Добавлен новый тип <strong>Symbol</strong> <a href="http://www.ecma-international.org/ecma-262/6.0/#sec-symbol-objects">19.4</a>, применимый для идентификаторов свойств объектов</li>
<li><strong>Генераторы</strong> <a href="http://www.ecma-international.org/ecma-262/6.0/#sec-generatorfunction-objects">25.2</a>, позволяющие организовать эффективное выполнение функций в асинхронном режиме. Генераторы представляют собой специальные функции, генерирующие итераторы. Использование выражения <code>yield</code> для генератора, позволяет приостановить его выполнение и вернуть управление вызвавшей генератор функции. Особенность генератора состоит в том, что последующие вызовы будут использовать предыдущее состояние и продолжат выполнение кода генератора с того места, где он был приостановлен</li>
<li>Объект <strong>WeakSet</strong> <a href="http://www.ecma-international.org/ecma-262/6.0/#sec-weakset-objects">23.4</a>, позволяющий определить множество из объектов, и объект <strong>WeakMap</strong> <a href="http://www.ecma-international.org/ecma-262/6.0/#sec-weakmap-objects">23.3</a>, определяет коллекцию пар ключ/значение в которых ключ является объектом, к которому может быть прикреплено произвольное значение. WeakSet и WeakMap отличаются использованием эффективных с точки зрения потребления памяти структур, использующих сборщик мусора для удаления неиспользуемых объектов (объект удаляется, если на него больше не осталось ссылок, кроме ссылки из текущей коллекции) и предотвращающих возникновение утечек памяти;</li>
<li><strong>Механизм Promise</strong> <a href="http://www.ecma-international.org/ecma-262/6.0/#sec-promise-objects">25.4</a>, предназначенный для получения значений в асинхронном режиме. Позволяет определить значение, которое пока неизвестно, но будут определено через какое-то время</li>
<li><strong>Значения по умолчанию для аргументов функций</strong> <a href="http://www.ecma-international.org/ecma-262/6.0/#sec-function-objects">19.2</a> (например, <code>function myfunc(a='test', b=1)</code>)</li>
<li><strong>Передача в функцию произвольной группы параметров в форме массива</strong> <a href="http://www.ecma-international.org/ecma-262/6.0/#sec-function-objects">19.2</a> (например, <code>function myfunc(a, b, ...c)</code>)</li>
<li><strong>Cтруктуры данных Map и Set</strong> <a href="http://www.ecma-international.org/ecma-262/6.0/#sec-map-objects">23.1</a>, <a href="http://www.ecma-international.org/ecma-262/6.0/#sec-set-objects">23.2</a>, упрощающих работу со специфичными типами коллекций. Map позволяет определять коллекции наборов в формате ключ/значение, при том, что в качестве ключа и значения могут выступать любые выражения JavaScript. По аналогии Set позволяет задать множество любых выражений JavaScript;</li>
<li><strong>Поддержка абстракции массивов</strong> (Array comprehensions), дающих возможность создания нового массива на основе другого массива;</li>
<li>Добавлено <strong>множество методов для строк, массивов и математических операций</strong>, в том числе:

<ul>
<li>Array.from() <a href="http://www.ecma-international.org/ecma-262/6.0/#sec-array.from">22.1.2.1</a></li>
<li>Array.prototype.keys <a href="http://www.ecma-international.org/ecma-262/6.0/#sec-array.prototype.keys">22.1.3.13</a></li>
<li>Array.prototype.entries <a href="http://www.ecma-international.org/ecma-262/6.0/#sec-array.prototype.entries">22.1.3.4</a></li>
<li>Array.prototype.copyWithin() <a href="http://www.ecma-international.org/ecma-262/6.0/#sec-array.prototype.copywithin">22.1.3.3</a></li>
<li>Number.isSafeInteger() <a href="http://www.ecma-international.org/ecma-262/6.0/#sec-number.issafeinteger">20.1.2.5</a></li>
<li>Math.fround() <a href="http://www.ecma-international.org/ecma-262/6.0/#sec-math.fround">20.2.2.17</a></li>
<li>String.prototype.startsWith() <a href="http://www.ecma-international.org/ecma-262/6.0/#sec-string.prototype.startswith">21.1.3.18</a></li>
<li>String.prototype.endsWith() <a href="http://www.ecma-international.org/ecma-262/6.0/#sec-string.prototype.endswith">21.1.3.6</a></li>
<li>Math.imul <a href="http://www.ecma-international.org/ecma-262/6.0/#sec-math.imul">20.2.2.19</a></li>
</ul>
</li>
</ul>


<p>В дополненение к списку хочу упомянуть хороший сайт <a href="http://es6-features.org/">es6-features.org</a>, поддерживаемый  <a href="https://twitter.com/engelschall">@engelschall</a>, на котором приводятся обзор и сравнение новых фич из ES6 c ES5.</p>

<p>А пока разработчики браузеров пишут свои движки с поддержкой ES2015, мы можем попробовать новый стандарт в действии уже сейчас. Например, сейчас большинство возможностей ES2015 в Chrome скрыто под флагом <a href="chrome://flags/#enable-javascript-harmony">chrome://flags/#enable-javascript-harmony</a>. Включив это свойство и перезапустив браузер, можно уже сейчас использовать <a href="https://github.com/joyent/node/wiki/ES6-%28a.k.a.-Harmony%29-Features-Implemented-in-V8-and-Available-in-Node">следующие</a> функции ES2015.</p>

<p>У <a href="https://github.com/addyosmani">@addyosmani</a> есть замечательный репозиторий, где он собрал коллекцию <a href="https://github.com/addyosmani/es6-tools">es6-tools</a>.
Первым в списке стоит Babel. Давайте разберем его подробнее и узнаем, как с помощью него можно уже сейчас писать код на ES6.</p>

<h3>Babel</h3>

<p><a href="https://babeljs.io/">Babel</a> - это JavaScript транскомпилятор. Если кратко, то транскомпилятор отличается от компилятора тем, что он переводит код из новой версии в более старый - стабильный. Подробнее про транскомпиляторы можно почитать <a href="https://en.wikipedia.org/wiki/Source-to-source_compiler">тут</a>. Как написано на их сайте:</p>

<blockquote><p>By default, Babel ships with a set of ES2015 syntax transformers. These allow you to use new syntax, right now without waiting for browser support.</p></blockquote>

<p>и это то, что нам нужно! Поиграться с этим транскомпилятором, не устанавливая его, можно прямо на сайте <a href="https://babeljs.io/repl/">babeljs.io/repl/</a>. Если мы хотим написать что-то серьезное, то нам нужно <a href="https://babeljs.io/docs/setup/">установить и начать использовать</a> этот транскомпилятор.</p>

<h3>Пишем свой первый класс на ES2015</h3>

<p>Используем сервис codepen.io и включим в настройках поддержку Babel. В своем примере я продемонстрировал новые возможности ES2015: классы, их наследование и шаблоны строк.</p>

<div data-height="264" data-theme-id="16380" data-slug-hash="yNpWYY" data-default-tab="js" data-user="greybax" class='codepen'><pre><code>// Базовый класс Person
class Person {
  constructor(name, age) {
    this.name = name;
    this.age = age;
  }
  about() {
     console.log(`${this.name} is ${this.age} years old`);
  }
}

var jack = new Person(&quot;Jack&quot;, &quot;50&quot;);
jack.about();

// Класс Son - наследник
class Son extends Person {
  constructor(name, age) {
    super(name, age);
    this.son = true;
  }
}

var john = new Son(&quot;John&quot;, &quot;25&quot;);
john.about();
john.son;</code></pre>
<p>See the Pen <a href='http://codepen.io/greybax/pen/yNpWYY/'>yNpWYY</a> by Alex Filatov (<a href='http://codepen.io/greybax'>@greybax</a>) on <a href='http://codepen.io'>CodePen</a>.</p>
</div>


<script async src="//assets.codepen.io/assets/embed/ei.js"></script>


<h3>Ссылки</h3>

<ul>
<li><a href="http://www.ecma-international.org/ecma-262/6.0/">Официальная спецификация ES 2015 </a>.</li>
<li><a href="http://exploringjs.com/">Exploring ES6: Upgrade to the next version of JavaScript</a> - Отличная книга доктора Axel Rauschmayer по ES6. Axel также является автором книги <a href="http://speakingjs.com/">Speaking JavaScript: An In-Depth Guide for Programmers</a>, ведет свой блог <a href="http://www.2ality.com/">2ality.com</a> и организатор <a href="http://www.munichjs.org/">MunichJS User Group</a></li>
<li><a href="http://es6-features.org/">es6-features.org</a> - классный сайт, поддерживаемый <a href="https://twitter.com/engelschall">@engelschall</a>.  Приводится обзор и сравнение новых фич из ES6 c ES5.</li>
<li><a href="https://medium.com/innoarchitech-innovation-architecture-technology/javascript-ecma-262-tc39-and-ecmascript-transpilers-explained-adde38701bf7">JavaScript, ECMA–262, TC39, and ECMAScript Transpilers Explained</a></li>
<li><a href="https://hacks.mozilla.org/category/es6-in-depth/">Цикл статей ES6 In Depth</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Мигрируем Javascript код в TypeScript]]></title>
    <link href="http://alfilatov.com/blog/2015/06/05/mighriruiem-js-kod-v-typescript/"/>
    <updated>2015-06-05T13:16:39+00:00</updated>
    <id>http://alfilatov.com/blog/2015/06/05/mighriruiem-js-kod-v-typescript</id>
    <content type="html"><![CDATA[<p>Не так давно стояла задача перевести один старый проект из кода на <code>Javascript</code> в <code>TypeScript</code>. Хочу поделиться своим опытом такого перехода. Рассмотрим на примере разработки в Visual Studio.</p>

<p>Для начала стоит отметить, что такая миграция не является проблемой с точки зрения совместимости, т.к код на <code>Javascript</code> - это синтаксически корректный код на <code>TypeScript</code>.</p>

<p>Итак, выделим основные этапы, после выполнения которых произойдет чудесное
превращение:</p>

<ul>
<li>Переименуем все <code>.js</code> файлы в <code>.ts</code></li>
<li><p>Настраиваем компиляцию из <code>.ts</code> в <code>.js</code></p>

<ul>
<li>Для этого нужно скачать и установить <code>TypeScript</code> плагин для студии с <a href="http://www.typescriptlang.org/#Download">официального сайта</a>, позволяющий компилировать <code>.ts</code> файлы в <code>.js</code>.</li>
</ul>
</li>
<li><p>Устанавливаем определения для библиотек (<code>.d.ts</code>)</p>

<ul>
<li>Коллекция определений библиотек находится в <a href="https://github.com/borisyankov/DefinitelyTyped">открытом доступе</a>. Определения для <code>javascript</code> библиотек можно установить через <a href="http://definitelytyped.org/tsd/">tsd</a> - это аналог NuGet Package Manager.</li>
</ul>
</li>
<li><p>Пишем определения для своего кода</p>

<ul>
<li>Это совсем не сложно и делается по аналогии с кучей примеров из <a href="https://github.com/borisyankov/DefinitelyTyped">DefinitelyTyped on GitHub</a>. Мой пример можно посмотреть <a href="https://github.com/greybax/DefinitelyTyped/tree/master/quixote">тут</a>, который я писал по <a href="https://github.com/jamesshore/quixote/blob/master/docs/api.md">документации для библиотеки quixote</a></li>
</ul>
</li>
<li><p>Рефакторим чтобы использовать язык <code>TypeScript</code></p>

<ul>
<li>После компиляции проекта в вашем коде будут возникать ошибки, которые слудует исправлять в соответвии с семантикой <code>TypeScript</code>. После исправления всех ошибок вы получите рабочий проект на <code>TypeScript</code> со всеми вытекающими отсюда удобствами.</li>
</ul>
</li>
</ul>


<p><strong>Итог</strong>: Все, как оказалось невероятно просто, как досчитать до 5! :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Получаем список обработчиков элемента в DOM'е]]></title>
    <link href="http://alfilatov.com/blog/2015/04/10/poluchaiem-spisok-obrabotchikov-eliemienta-stranitsy/"/>
    <updated>2015-04-10T16:55:10+00:00</updated>
    <id>http://alfilatov.com/blog/2015/04/10/poluchaiem-spisok-obrabotchikov-eliemienta-stranitsy</id>
    <content type="html"><![CDATA[<p>Допустим, что у нас есть элемент на странице. Пусть это будет <code>div</code>. Наша задача - получить все обработчики этого элемента. Рассмотрим варианты решения этой задачи в различных браузерах, а именно <code>IE</code>, <code>Firefox</code>, <code>Chrome</code>. В каждом современном браузере в консоли разработчка есть специальный UI для этих целей. Например в <code>Chrome</code> это <code>DevTools</code> -> <code>Elements</code> -> <code>Выбрать интересующий DOM узел</code> -> <code>Вкладка Event Listeners</code>. В нашем случае, поговорим о получании списка обработчиков программно.</p>

<h3>Способ 1</h3>

<ul>
<li><p>Использовать метод <code>getEventListeners(target)</code>. В браузере <code>Chrome</code> (является методом DevTools API) этот метод работает без лишних телодвижений - возвращает объект-массив эвентов на целевом элементе.</p></li>
<li><p>Ситуация с <code>Firefox</code> немного сложнее. Данный метод доступен после установки <code>Firebug</code> <a href="http://getfirebug.com/wiki/index.php/GetEventListeners">GetEventListeners</a>.</p></li>
<li><p>В <code>IE</code> все совсем плохо, т.к такой метод не реализован в API консоли разработчика и нет extensions с его аналогами (я таких не нашел).</p></li>
</ul>


<h3>Способ 2</h3>

<p>Итак, мы выяснили, что метод <code>getEventListeners</code> не является кроссбраузерным и является частью Developer Console API, поэтому рассмотрим следующий <del>костыль</del> вариант решения. Для этого нам придется переопределить нативные методы <code>Element.prototype.addEventListener</code> и <code>Element.prototype.removeEventListener</code> (для старых версий <code>IE</code> нужно переопределить свои аналоги) своими кастомными реализациями которые будут отслеживать <code>event listeners</code>.</p>

<p data-height="268" data-theme-id="0" data-slug-hash="RNzGwj" data-default-tab="result" data-user="greybax" class='codepen'>See the Pen <a href='http://codepen.io/greybax/pen/RNzGwj/'>RNzGwj</a> by Alex Filatov (<a href='http://codepen.io/greybax'>@greybax</a>) on <a href='http://codepen.io'>CodePen</a>.</p>


<script async src="//assets.codepen.io/assets/embed/ei.js"></script>


<p><strong><em>Плюс</em></strong>:</p>

<ul>
<li>Это единственный способ получить все обработчики событий (в том числе, зарегистрированные сторонними библиотеками, например, <code>jQuery</code>)</li>
</ul>


<p><strong><em>Минус</em></strong>:</p>

<ul>
<li>Cкрипт, который выполняет переопределение, должен быть выполнен первым - до <code>jQuery/Prototype/</code> и др., т.к иначе <code>event listeners</code>, зарегистрированные через эти сценарии будут не отражены.</li>
</ul>


<h3>Способ 3</h3>

<p>Можно ничего не писать и использовать сторонние реализации функции, например <a href="https://github.com/alvinteh/geteventlisteners">эту</a>.</p>

<p><strong><em>Минусы</em></strong>:</p>

<ul>
<li>Плагин, в состоянии обнаружить и получить обработчики событий, зарегистрированные <strong><em>только</em></strong> через <code>jQuery</code>.</li>
<li>Завязан на <code>jQuery</code> версии >=1.8.</li>
</ul>


<h3>Итог</h3>

<p>Универсального (кроссбраузерного) и по-настоящему хорошего варианта, к сожалению, сейчас не существует.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Что можно почитать по Frontend'у]]></title>
    <link href="http://alfilatov.com/blog/2015/03/30/gdie-ia-bieru-informatsiiu-o-mirie-frontend/"/>
    <updated>2015-03-30T10:43:02+00:00</updated>
    <id>http://alfilatov.com/blog/2015/03/30/gdie-ia-bieru-informatsiiu-o-mirie-frontend</id>
    <content type="html"><![CDATA[<p>Решил написать пост для себя, обобщив (может кому тоже будет интересно), что и где можно почитать о фронтенд разработке. В наше время успешный разработчик должен постоянно развиваться, чтобы успевать за бурным развитием технологий, часть из котороых умирает, не успев завоевать популярность, а другие становится must have.
Хочу выделить основные источники, из которых я черпаю информацию на данный момент.</p>

<h3>Статьи</h3>

<ul>
<li><a href="http://habrahabr.ru/hubs/frontend/">Хабрахабр</a></li>
<li><a href="http://frontender.info/">Frontender Magazine</a> - переводы статей иностранных авторов.</li>
</ul>


<h3>Twitter</h3>

<p>Удобно получать последние новости из твиттера. Решил выделить несколько:</p>

<ul>
<li><a href="https://twitter.com/jsunderhood">@jsunderhood</a> - каждую неделю новый разработчик рассказывает о себе и своей работе. Можно задавать вопросы и участвовать в дискуссиях</li>
<li><a href="https://twitter.com/frontenderinfo">@frontenderinfo</a> - твиттер журнала Frontender Magazine</li>
<li><a href="https://twitter.com/addyosmani">@addyosmani</a> - Engineer at Google working on Chrome &amp; Polymer. Author, Creator of TodoMVC, @Yeoman.</li>
<li><a href="https://twitter.com/jlongster">@jlongster</a> - Works on Firefox Developer Tools at Mozilla.</li>
<li><a href="https://twitter.com/getify">@getify</a> - твиттер Kyle Simpson. All things JavaScript. Open Web Evangelist.</li>
<li><a href="https://twitter.com/paul_irish">@paul_irish</a> - твиттер Paul Irish (Engineer at Google)</li>
<li><a href="https://twitter.com/kangax">@kangax</a> - Javascript maniac. Fitness enthusiast. Ex-Prototype.js core, printio.ru co-founder, @fabricjs creator, HTMLMinifier, JSCritic, ES compat tables, es-discourse</li>
</ul>


<h3>Подкасты</h3>

<ul>
<li><a href="http://radiojs.ru/">RadioJS Podcast</a> - недавно прочитал о нем в одном из твитов @jsunderhood, послушал и заинтересовался.</li>
</ul>


<h3>Meetups</h3>

<p>Одно и полезных мероприятий, где можно <del>попить пивка на афтерпати</del> вживую пообщаться с коллегами на темы приближенные твоему профилю.
Сам я из Ярославля и рад тому, что в нашем городе наконец-то появился <a href="http://yarfrontend.ru/">Yaroslavl Frontend Meetup</a>, организатором которого является компания &ldquo;Тензор&rdquo;. Также считаю, что одним из крутейших митапов у нас в стране является <a href="http://www.moscowjs.ru/">MoscowJS</a>, на котором собираются ребята из топовых компаний.</p>

<h3>Конференции</h3>

<p>Конференции, которые на мой взгляд заслуживают внимания, являются платными, поэтому пишу о них в последнюю очередь:</p>

<ul>
<li><a href="http://frontendconf.ru/">frontendconf</a> - специализированная фронтенд тусовка</li>
<li><a href="http://devconf.ru/">DevConf</a> - конференция посвещена веб разработке, в целом вне зависимости от технологий.</li>
<li><a href="http://www.msdevcon.ru/">DevCon</a> - конференция, организованная компанией Microsoft, соответственно все о технологиях MS.</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Debugging файлов TypeScript в браузере через эмулятор DevExtreme]]></title>
    <link href="http://alfilatov.com/blog/2014/12/02/diebaghghingh-typescript-failov-v-emuliatorie-devextreme/"/>
    <updated>2014-12-02T19:45:38+00:00</updated>
    <id>http://alfilatov.com/blog/2014/12/02/diebaghghingh-typescript-failov-v-emuliatorie-devextreme</id>
    <content type="html"><![CDATA[<p>Недавно встала задача добавить поддержку debugging&#8217;а файлов <code>*.ts</code> в браузере. В нашем случае это Google Chrome.
Постараюсь как можно подробнее описать этот процесс.</p>

<ol>
<li><p>Для начала нужно определить в какой директории находится DevExtreme сервер, который запускает приложение, когда мы нажимаем в VS кнопку <code>Запустить в браузере Google Chrome</code>. Ответ на этот вопрос был найден в одном из тикетов на сайте <a href="https://www.devexpress.com/Support/Center/Question/Details/Q523956">DevExpress</a>. В случае Visual Studio 2012 это путь <code>C:\Program Files (x86)\Microsoft Visual Studio 12.0\Common7\IDE\Extensions\DevExtreme\WebServer</code></p></li>
<li><p>Добавляем в проект <code>*.map файл</code>. Это необходимо для связи файлов <code>js</code> и <code>ts</code></p></li>
<li><p>Заключительный этап - добавление &ldquo;символической ссылки&rdquo; на проект в директории веб сервера DevExtreme. Можно просто скопировать проект в директорию указаную выше. В этом случае мы лишим сервер возможности автоматически подхватывать изменения в проекте. Чтобы это учесть, выполним команду <a href="http://ss64.com/nt/mklink.html">mklink</a>. Для этого:</p>

<ul>
<li>Запускаем <code>cmd</code> под администратором</li>
<li>Переходим в каталог DevExpress WebServer</li>
<li>Выполняем команду <code>mklink /D &lt;project_link_name&gt; &lt;project_path&gt;</code>. В моем случае это <code>mklink /D Pos C:\Projects\Pos</code></li>
<li>Символическая ссылка <code>project_link_name</code> создана в директории <code>project_path</code></li>
</ul>
</li>
</ol>


<p>Дополнительный ссылки:</p>

<ul>
<li><a href="http://js.devexpress.com/Documentation/Howto/SPA_Framework/Application_Design/?version=14_1#Running">Running, Debugging and Deploy DevExtreme applications</a></li>
<li><a href="http://stackoverflow.com/questions/12683820/typescript-in-vs2012-automatically-generating-js-from-ts">Typescript in VS2012: (automatically) generating .js from .ts</a></li>
<li><a href="http://ss64.com/nt/">An A-Z Index of the Windows CMD command line</a></li>
</ul>

]]></content>
  </entry>
  
</feed>
