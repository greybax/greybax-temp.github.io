<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Javascript | Aleksandr Filatov]]></title>
  <link href="http://alfilatov.com/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://alfilatov.com/"/>
  <updated>2014-08-27T20:49:10+00:00</updated>
  <id>http://alfilatov.com/</id>
  <author>
    <name><![CDATA[Aleksandr Filatov]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Пишем расширение для браузера Google Chrome]]></title>
    <link href="http://alfilatov.com/blog/2014/06/27/google-chrome/"/>
    <updated>2014-06-27T00:00:00+00:00</updated>
    <id>http://alfilatov.com/blog/2014/06/27/google-chrome</id>
    <content type="html"><![CDATA[<div class='post'>
В интернете много сайтов на которых реализована возможность листать страницу вверх без помощи мыши или полосы прокрутки. Но в то же время еще есть сайты где такой реализации нет. &#8220;Почему бы не попробовать написать скрипт который бы добавлял такую кнопку на все сайты?&#8221; - подумал я и принялся за реализацию. Такие скрипты называются пользовательскими и имеют расширение *.user.js. Почитать к примеру можно на <a href="http://habrahabr.ru/post/129343/">хабре</a>. К сожалению без &#8220;подводных камней&#8221; не обходится. Существуют некоторые различия в реализации userjs под разные браузеры. Я остановлюсь на описании реализации нашего userJS как расширения для браузера Google Chrome.<br /><a name='more'></a><br /><h2>manifest.json</h2>Обязательным для расширения Google Chrome является файл <b>manifest.json</b> в котором описываются параметры, пути к внешним файлам (*.js, *.css и др.), поддержка версии и т.п. для расширения. Подробнее о файле можно почитать <a href="https://developer.chrome.com/extensions/manifest">тут</a>. В нашем случае файл manifest.json выглядит следующим образом:<br /><pre style="background: rgba(238,238,238,0.92); color: black;">{<br />    <span style="color: #009933;">"manifest_version"</span>: <span style="color: #0066ff;">2</span>,<br />    <span style="color: #009933;">"content_scripts"</span>: [ {<br />        <span style="color: #009933;">"exclude_globs"</span>:    [  ],<br />        <span style="color: #009933;">"include_globs"</span>:    [ <span style="color: #009933;">"*"</span> ],<br />        <span style="color: #009933;">"js"</span>:               [ <span style="color: #009933;">"jquery.js"</span>, <span style="color: #009933;">"backTopUserJS.user.js"</span> ],<br />        <span style="color: #009933;">"css"</span>:              [ <span style="color: #009933;">"css/style.css"</span> ],<br />        <span style="color: #009933;">"matches"</span>:          [   <span style="color: #009933;">"http://*/*"</span>,<br />                                <span style="color: #009933;">"https://*/*"</span><br />                            ],<br />        <span style="color: #009933;">"run_at"</span>: <span style="color: #009933;">"document_end"</span><br />    } ],<br />    <span style="color: #009933;">"converted_from_user_script"</span>: <span style="color: #9700cc;">true</span>,<br />    <span style="color: #009933;">"description"</span>:  <span style="color: #009933;">"Back top userscript extension for google chrome"</span>,<br />    <span style="color: #009933;">"name"</span>:         <span style="color: #009933;">"backTopUserJS"</span>,<br />    <span style="color: #009933;">"version"</span>:      <span style="color: #009933;">"1"</span><br />}<br /></pre><br />Для удобства мы используем js библиотеку JQuery которую положили рядом с файлом manifest.json и основным файлом скрипта (в нашем случае это <b>backTopUserJS.user.js</b>). Его содержимое следующее: <br /><pre style="background: rgba(238,238,238,0.92); color: black;"><span style="color: #0066ff; font-style: italic;">// ==UserScript==</span><br /><span style="color: #0066ff; font-style: italic;">// @name backTopUserJS</span><br /><span style="color: #0066ff; font-style: italic;">// @author Aleksandr Filatov</span><br /><span style="color: #0066ff; font-style: italic;">// @license MIT</span><br /><span style="color: #0066ff; font-style: italic;">// @version 1.0</span><br /><span style="color: #0066ff; font-style: italic;">// ==/UserScript==</span><br /><br /><span style="font-weight: 700;">function</span> <span style="color: #ff8000;">main</span>() {<br />    <span style="font-weight: 700;">var</span> disp <span style="color: blue;">=</span> <span style="color: blue;">$</span>(<span style="color: #3333ff; font-weight: 700;">window</span>).scrollTop() <span style="color: blue;">&gt;</span> <span style="color: #0066ff;">400</span> ? <span style="color: #009933;">'block'</span> : <span style="color: #009933;">'none'</span>;<br />    <span style="font-weight: 700;">var</span> <span style="color: blue;">$</span>upButton <span style="color: blue;">=</span> <span style="color: blue;">$</span>(<span style="color: #009933;">'&lt;div class="up-button" title="Наверх" style="display:'</span> <span style="color: blue;">+</span> disp <span style="color: blue;">+</span> <span style="color: #009933;">'"&gt;Наверх&lt;/div&gt;'</span>);<br /><br />    <span style="color: blue;">$</span>(<span style="color: #3333ff; font-weight: 700;">document</span>).<span style="color: #3333ff; font-weight: 700;">find</span>(<span style="color: #009933;">'body'</span>).append(<span style="color: blue;">$</span>upButton);<br />    <span style="color: blue;">$</span>upButton.<span style="color: #3333ff; font-weight: 700;">click</span>(<span style="font-weight: 700;">function</span> () {<br />        <span style="color: blue;">$</span>(<span style="color: #009933;">'html, body'</span>).animate({ scrollTop: <span style="color: #0066ff;">0</span> }, <span style="color: #009933;">'slow'</span>);<br />    });<br /><br />    <span style="color: blue;">$</span>(<span style="color: #3333ff; font-weight: 700;">window</span>).<span style="color: #3333ff; font-weight: 700;">scroll</span>(<span style="font-weight: 700;">function</span> () {<br />        <span style="color: blue;">if</span> (<span style="color: blue;">$</span>(<span style="color: #3333ff; font-weight: 700;">window</span>).scrollTop() <span style="color: blue;">&gt;</span> <span style="color: #0066ff;">400</span>) <span style="color: blue;">$</span>upButton.fadeIn(<span style="color: #009933;">'slow'</span>);<br />        <span style="color: blue;">else</span> <span style="color: blue;">$</span>upButton.fadeOut(<span style="color: #009933;">'slow'</span>);<br />    });<br />};<br /><br /><span style="font-weight: 700;">var</span> script <span style="color: blue;">=</span> <span style="color: #3333ff; font-weight: 700;">document</span>.<span style="color: #3333ff; font-weight: 700;">createElement</span>(<span style="color: #009933;">'script'</span>);<br />script.<span style="color: #3333ff; font-weight: 700;">appendChild</span>(<span style="color: #3333ff; font-weight: 700;">document</span>.<span style="color: #3333ff; font-weight: 700;">createTextNode</span>(<span style="color: #009933;">'('</span><span style="color: blue;">+</span> main <span style="color: blue;">+</span><span style="color: #009933;">')();'</span>));<br />(<span style="color: #3333ff; font-weight: 700;">document</span>.<span style="color: #6782d3;">body</span> <span style="color: blue;">||</span> <span style="color: #3333ff; font-weight: 700;">document</span>.head <span style="color: blue;">||</span> <span style="color: #3333ff; font-weight: 700;">document</span>.<span style="color: #6782d3;">documentElement</span>).<span style="color: #3333ff; font-weight: 700;">appendChild</span>(script);<br /></pre><br />Думаю скрипт достаточно понятен, чтобы его подробно рассматривать. Пояснить стоит лишь последние 3 строчки. На самом деле это мелкий хак, который вставляет наш скрипт в код страницы сайта. Если кто-то из вас найдет способ лучше можете написать к комментах свои фиксы :)<br /><h2>Установка расширения в браузере</h2><div>В Google Chrome можно устанавливать пользовательские скрипты, аналогично другим браузерам, но поскольку Google печется о нашей с вами безопасности, то их приходится оборачивать в расширения для браузера. Разберем установку по шагам.</div><h3>Шаг 1.</h3><div>Создаем папку для нашего расширения например так C:\MyChromeExtensionUserJS</div><h3>Шаг 2.</h3><div>Для каждого расширения создаем свою директорию например в нашем случае назовем ее так C:\MyChromeExtensionUserJS\backTopUserJS&#46; Добавляем файлы расширения в эту директорию.</div><h3>Шаг 3.</h3><div>Заходим &#8220;О браузере Google Chrome&#8221; -&gt; вкладка &#8220;Расширения&#8221; или в адресной строке пишем chrome://extensions/</div><h3>Шаг 4.</h3><div>Ставим галочку &#8220;Режим разработчика&#8221;</div><div class="separator" style="clear: both; text-align: center;"><a href="http://1.bp.blogspot.com/-bax0UMkP6dU/U60tEjgXiLI/AAAAAAAABCQ/MRKVYzCoHjc/s1600/qwerty.png" imageanchor="1" style="clear: left; float: left; margin-bottom: 1em; margin-right: 1em;"><img border="0" src="http://1.bp.blogspot.com/-bax0UMkP6dU/U60tEjgXiLI/AAAAAAAABCQ/MRKVYzCoHjc/s1600/qwerty.png" height="84" width="640" /></a></div><br /><br /><br /><br /><br /><br /><br /><h3>Шаг 5.</h3><div>Нажимаем кнопку &#8220;Загрузить распакованное расширение&#8221; и выбираем директорию нашего расширения. Нажимаем &#8220;OK&#8221;.</div><h3>Шаг 6.</h3><div>Расширение установлено и готово к работе. Чтобы обновить расширения после того как вы внесли в него изменения достаточно просто нажать кнопку &#8220;Обновить расширение&#8221; или в режиме разработчика сочетание клавиш Ctrl+R.</div><div><h2>Итог</h2></div><div>Посмотреть исходники скрипта можно на <a href="https://github.com/greybax/backTopUserJS">github</a>. Скрипт не претендует на звание идеального, а служит лишь примером и толчком к написанию собственных пользовательских скриптов для Google Chrome.</div></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Основы языка Javascript]]></title>
    <link href="http://alfilatov.com/blog/2014/06/13/javascript/"/>
    <updated>2014-06-13T00:00:00+00:00</updated>
    <id>http://alfilatov.com/blog/2014/06/13/javascript</id>
    <content type="html"><![CDATA[<div class='post'>
Статья посвящена в первую очередь изучающим Javascript. Некоторые из вещей могут показаться очевидными, но я надеюсь, что читатель найдет что-то интересное и для себя. Сам я прочитал достаточное количество статей в сети по этому языку. Но найти материал который бы кратко и просто излагал сущность языка я так и не нашел. Это меня вдохновило на написание собственной статьи.<br /><h2>Javascript - это:</h2><div><ul><li>Прототипированный язык программирования</li><li>С недавних пор не только Client-side технология, но и Server-side (Node.js)</li><li>Не Java :)</li><li>Однопоточный, но асинхронный язык</li></ul><h2><a name='more'></a>Объявление переменных</h2></div><pre style="background: rgba(238,238,238,0.92); color: black;"><span style="font-weight: 700;">var</span> num;<br />num <span style="color: blue;">=</span> <span style="color: #0066ff;">100500</span>;<br /></pre><div><br />JS слабо типизированный язык, что демонстрирует следующий пример:<br /><pre style="background: rgba(238,238,238,0.92); color: black;"><span style="font-weight: 700;">var</span> text <span style="color: blue;">=</span> <span style="color: #009933;">'some text'</span>;<br />text <span style="color: blue;">=</span> <span style="color: #0066ff;">42</span>; <span style="color: #0066ff; font-style: italic;">// there is 42 now</span><br /></pre><br /><b>Важно:</b><br /><ul><li>Не забывайте ставить &#8216;;&#8217; в конце каждой строки</li><li>Всегда используйте <b>var </b>при объявлении переменных.</li></ul><div><h3>Типы данных</h3></div><h4>Простые</h4><div><ul><li>Number</li><li>String</li><li>Boolean</li><li>Undefined</li><li>Null</li></ul><h4>Ссылочные</h4></div><div><ul><li>Object</li></ul><div>Разберем каждый тип подробнее:</div></div><h4>Number</h4><div><pre style="background: rgba(238,238,238,0.92); color: black;"><span style="font-weight: 700;">var</span> num <span style="color: blue;">=</span> <span style="color: #0066ff;">100500</span>;<span style="color: #0066ff; font-style: italic;"> // this is a number type</span><br />num <span style="color: blue;">=</span> <span style="color: #0066ff;">0.0009</span>;<span style="color: #0066ff; font-style: italic;"> // this is a number type</span><br /></pre></div><br />Доступны все стандартные числовые операции:&nbsp;+, - , *, /, %, ++, &#8211; <br /><br /><div><pre style="background: rgba(238,238,238,0.92); color: black;"><span style="font-weight: 700;">var</span> thisIsInfinity <span style="color: blue;">=</span> <span style="color: #0066ff;">999/0</span>;<span style="color: #0066ff; font-style: italic;"> // Infinity</span><br /><span style="font-weight: 700;">var</span> thisIsNaN <span style="color: blue;">=</span> <span style="color: #0066ff;">"this is not number" * 3</span>;<span style="color: #0066ff; font-style: italic;"> // NaN</span><br /></pre></div><h4>String</h4></div><div>Пример использования кавычек:</div><div><br /></div><div><pre style="background: rgba(238,238,238,0.92); color: black;"><span style="font-weight: 700;">var</span> fooString <span style="color: blue;">=</span> "I say: 'Yeah<span style="color: blue;">!</span>' It's cool.";<br />fooString <span style="color: blue;">=</span> 'He said: "Yeah<span style="color: blue;">!</span>"’;<br /></pre><br />Конкатенация строк:<br /><br /><pre style="background: rgba(238,238,238,0.92); color: black;"><span style="font-weight: 700;">var</span> text <span style="color: blue;">=</span> “a” <span style="color: blue;">+</span> “b”; <span style="color: #0066ff; font-style: italic;">// text has value ‘ab’</span><br /></pre><br />Другие полезные методы:<br /><ul><li>charAt()</li><li>indexOf()</li><li>slice()</li><li>toLowerCase()</li><li>toUpperCase()</li></ul><h4>Boolean, undefined and null</h4><div><b>1. Boolean </b>(true/false):<br /><br /><pre style="background: rgba(238,238,238,0.92); color: black;"><span style="font-weight: 700;">var</span> thisIsTrue <span style="color: blue;">=</span> <span style="color: #9700cc;">true</span>;<br /></pre><br /><b>2. Undefined </b>- специальный тип, который означает, что переменная не определена.<br /><br /><pre style="background: rgba(238,238,238,0.92); color: black;"><span style="font-weight: 700;">var</span> foo; <span style="color: #0066ff; font-style: italic;">// It is ‘undefined’</span><br /></pre></div><br /><b>3. Null</b> - специальный тип, означает &#8220;ничего&#8221;.<br /><br /><pre style="background: rgba(238,238,238,0.92); color: black;"><span style="font-weight: 700;">var</span> bar <span style="color: blue;">=</span> <span style="color: #9700cc;">null</span>;<br /></pre><h3>Объекты в Javascript</h3></div><div>Объекты в JS это стандартные ассоциативные массивы, другими словами &#8220;хэш&#8221;.<br /><pre style="background: rgba(238,238,238,0.92); color: black;"><span style="font-weight: 700;">var</span> obj <span style="color: blue;">=</span> {<br />    name: <span style="color: #009933;">"John"</span>,<br />    lastname: <span style="color: #009933;">"Johnson"</span><br />}<br /></pre><br />Ассоциативный массив - абстрактный тип данных состоят из набора из пар &lt;ключ&gt;: &lt;значение&gt;. <br /><h4>Создание объектов</h4></div><div>Оба этих метода эквивалентны:<br /><pre style="background: rgba(238,238,238,0.92); color: black;"><span style="color: #0066ff; font-style: italic;">// simple creating</span><br /><span style="font-weight: 700;">var</span> obj <span style="color: blue;">=</span> {};<br /> <br /><span style="color: #0066ff; font-style: italic;">// standard syntax</span><br /><span style="font-weight: 700;">var</span> obj <span style="color: blue;">=</span> <span style="color: blue;">new</span> Object();<br /></pre><br />Литеральный синтаксис: <br /><pre style="background: rgba(238,238,238,0.92); color: black;"><span style="color: #0066ff; font-style: italic;">//creation with properties</span><br /><span style="font-weight: 700;">var</span> obj <span style="color: blue;">=</span> {<br />    name: “John”,<br />    lastName: “Johnson”<br />}<br /></pre><h3>Операции с объектами</h3><pre style="background: rgba(238,238,238,0.92); color: black;">o.<span style="color: #6782d3;">name</span> <span style="color: blue;">=</span> “John”; <span style="color: #0066ff; font-style: italic;">//add property</span><br />o[“lastName”] <span style="color: blue;">=</span> “Johnson”;<br /><br /><span style="color: #3333ff; font-weight: 700;">alert</span>(o.<span style="color: #6782d3;">name</span>); <span style="color: #0066ff; font-style: italic;">//get property</span><br /><span style="color: #3333ff; font-weight: 700;">alert</span>(o[“lastName”]);<br /><br /><span style="color: blue;">delete</span> o.<span style="color: #6782d3;">name</span>; <span style="color: #0066ff; font-style: italic;">//delete property</span><br /></pre><h4>Оператор &#8216;in&#8217;</h4></div><div><pre style="background: rgba(238,238,238,0.92); color: black;">obj <span style="color: blue;">=</span> <span style="color: blue;">new</span> Object();<br />obj.prop <span style="color: blue;">=</span> <span style="color: #009933;">'exists'</span>;<br /><span style="color: #009933;">'prop'</span> <span style="color: blue;">in</span> obj; <span style="color: #0066ff; font-style: italic;">// returns true</span><br /><span style="color: #009933;">'toString'</span> <span style="color: blue;">in</span> obj; <span style="color: #0066ff; font-style: italic;">// returns true</span><br /></pre><h4>hasOwnProperty  </h4></div><div><pre style="background: rgba(238,238,238,0.92); color: black;">obj <span style="color: blue;">=</span> <span style="color: blue;">new</span> Object();<br />obj.prop <span style="color: blue;">=</span> <span style="color: #009933;">'exists'</span>;<br />obj.hasOwnProperty(<span style="color: #009933;">'prop'</span>); <span style="color: #0066ff; font-style: italic;">// returns true</span><br />obj.hasOwnProperty(<span style="color: #009933;">'toString'</span>); <span style="color: #0066ff; font-style: italic;">// returns false</span><br /></pre><br />В отличие от оператора in, метод hasOwnProperty не проверяет по объекту цепочку прототипов. <br /><h4>=== undefined</h4></div><div><pre style="background: rgba(238,238,238,0.92); color: black;"><span style="font-weight: 700;">var</span> obj <span style="color: blue;">=</span> {};<br /><span style="color: #0066ff; font-style: italic;">// add property with undefined value </span><br />obj.test <span style="color: blue;">=</span> <span style="color: #9700cc;">undefined</span>; <br /><span style="color: #3333ff; font-weight: 700;">alert</span>(obj.test <span style="color: blue;">===</span> <span style="color: #9700cc;">undefined</span>); <span style="color: #0066ff; font-style: italic;">// true</span><br /><span style="color: #3333ff; font-weight: 700;">alert</span>(obj.test2 <span style="color: blue;">===</span> <span style="color: #9700cc;">undefined</span>); <span style="color: #0066ff; font-style: italic;">// true</span><br /></pre><br />Вполне возможна ситуация, что свойство существует и является равно undefined <br /><h3>Преобразование типов</h3></div><div><h4>String</h4></div><div><pre style="background: rgba(238,238,238,0.92); color: black;"><span style="font-weight: 700;">var</span> str1 <span style="color: blue;">=</span> <span style="color: #3333ff; font-weight: 700;">String</span>(<span style="color: #0066ff;">1</span>);  <span style="color: #0066ff; font-style: italic;">// string '1'</span><br /><span style="font-weight: 700;">var</span> str2 <span style="color: blue;">=</span> <span style="color: #009933;">''</span> <span style="color: blue;">+</span> <span style="color: #0066ff;">1</span>;     <span style="color: #0066ff; font-style: italic;">// string '1'</span><br /></pre><h4>Numerical</h4></div><div><pre style="background: rgba(238,238,238,0.92); color: black;"><span style="font-weight: 700;">var</span> num1 <span style="color: blue;">=</span> <span style="color: #3333ff; font-weight: 700;">Number</span>(<span style="color: #009933;">'42'</span>);   <span style="color: #0066ff; font-style: italic;">//number 42</span><br /><span style="font-weight: 700;">var</span> num2 <span style="color: blue;">=</span> <span style="color: blue;">+</span><span style="color: #009933;">"42"</span>;          <span style="color: #0066ff; font-style: italic;">//number 42</span><br /></pre><h4>Boolean</h4></div><div><pre style="background: rgba(238,238,238,0.92); color: black;"><span style="font-weight: 700;">var</span> bool1 <span style="color: blue;">=</span> <span style="color: #3333ff; font-weight: 700;">Boolean</span>(<span style="color: #9700cc;">null</span>);   <span style="color: #0066ff; font-style: italic;">//false</span><br /><span style="font-weight: 700;">var</span> bool2 <span style="color: blue;">=</span> <span style="color: blue;">!</span><span style="color: blue;">!</span><span style="color: #9700cc;">null</span>;          <span style="color: #0066ff; font-style: italic;">//false</span><br /></pre><h3>Операторы сравнения </h3></div><div>Приведение типов используется в операторах: &lt;,&gt;,&lt;=,=&gt;,==,!= </div><div>Приведение типов НЕ используется в операторах: ===, !== </div><div>Советую использовать для более наглядного сравнения равенства/неравенства операторы === и !== соответственно.<br /><br />Примеры для демонстрации:<br /><pre style="background: rgba(238,238,238,0.92); color: black;"><span style="color: #009933;">""</span> <span style="color: blue;">==</span> <span style="color: #009933;">"0"</span> <span style="color: #0066ff; font-style: italic;">// false</span><br /><span style="color: #0066ff;">0</span> <span style="color: blue;">==</span> <span style="color: #009933;">""</span> <span style="color: #0066ff; font-style: italic;">// true</span><br /><span style="color: #0066ff;">0</span> <span style="color: blue;">==</span> <span style="color: #009933;">"0"</span> <span style="color: #0066ff; font-style: italic;">// true</span><br /><span style="color: #9700cc;">false</span> <span style="color: blue;">==</span> <span style="color: #009933;">"false"</span> <span style="color: #0066ff; font-style: italic;">// false</span><br /><span style="color: #9700cc;">false</span> <span style="color: blue;">==</span> <span style="color: #009933;">"0"</span> <span style="color: #0066ff; font-style: italic;">// true</span><br /><span style="color: #9700cc;">false</span> <span style="color: blue;">==</span> <span style="color: #9700cc;">undefined</span> <span style="color: #0066ff; font-style: italic;">// false</span><br /><span style="color: #9700cc;">false</span> <span style="color: blue;">==</span> <span style="color: #9700cc;">null</span> <span style="color: #0066ff; font-style: italic;">// false</span><br /><span style="color: #9700cc;">null</span> <span style="color: blue;">==</span> <span style="color: #9700cc;">undefined</span> <span style="color: #0066ff; font-style: italic;">// true</span><br /><span style="color: #009933;">"<span style="color: #6782d3;">\t</span><span style="color: #6782d3;">\r</span><span style="color: #6782d3;">\n</span>"</span> <span style="color: blue;">==</span> <span style="color: #0066ff;">0</span> <span style="color: #0066ff; font-style: italic;">// true</span><br /></pre><br /><pre style="background: rgba(238,238,238,0.92); color: black;"><span style="color: #009933;">""</span> <span style="color: blue;">===</span> <span style="color: #009933;">"0"</span> <span style="color: #0066ff; font-style: italic;">// false</span><br /><span style="color: #0066ff;">0</span> <span style="color: blue;">===</span> <span style="color: #009933;">""</span> <span style="color: #0066ff; font-style: italic;">// false</span><br /><span style="color: #0066ff;">0</span> <span style="color: blue;">===</span> <span style="color: #009933;">"0"</span> <span style="color: #0066ff; font-style: italic;">// false</span><br /><span style="color: #9700cc;">false</span> <span style="color: blue;">===</span> <span style="color: #009933;">"false"</span> <span style="color: #0066ff; font-style: italic;">// false</span><br /><span style="color: #9700cc;">false</span> <span style="color: blue;">===</span> <span style="color: #009933;">"0"</span> <span style="color: #0066ff; font-style: italic;">// false</span><br /><span style="color: #9700cc;">false</span> <span style="color: blue;">===</span> <span style="color: #9700cc;">undefined</span> <span style="color: #0066ff; font-style: italic;">// false</span><br /><span style="color: #9700cc;">false</span> <span style="color: blue;">===</span> <span style="color: #9700cc;">null</span> <span style="color: #0066ff; font-style: italic;">// false</span><br /><span style="color: #9700cc;">null</span> <span style="color: blue;">===</span> <span style="color: #9700cc;">undefined</span> <span style="color: #0066ff; font-style: italic;">// false</span><br /><span style="color: #009933;">"<span style="color: #6782d3;">\t</span><span style="color: #6782d3;">\r</span><span style="color: #6782d3;">\n</span>"</span> <span style="color: blue;">===</span> <span style="color: #0066ff;">0</span> <span style="color: #0066ff; font-style: italic;">// false</span><br /></pre><h3>Массивы </h3></div><div>Одно из важных и отличительных свойств массивов в Javascript является то, что массивы могут содержать переменные разных типов.</div><div><pre style="background: rgba(238,238,238,0.92); color: black;"><span style="font-weight: 700;">var</span> emptyArray <span style="color: blue;">=</span> [ ];<br /><span style="font-weight: 700;">var</span> numberArrray <span style="color: blue;">=</span> [<span style="color: #0066ff;">1</span>, <span style="color: #0066ff;">2</span>, <span style="color: #0066ff;">3</span>]; <br /><span style="font-weight: 700;">var</span> myCollection <span style="color: blue;">=</span> [<span style="color: #0066ff;">1</span>, <span style="color: #009933;">'string'</span>, <span style="color: #9700cc;">true</span>]; <br />myCollection[<span style="color: #0066ff;">0</span>]; <span style="color: #0066ff; font-style: italic;">// Return 1</span><br /></pre><br />Некоторые полезные функции работы с массивами:<br /><ul><li>push/pop</li><li>shift/unshift</li><li>splice</li><li>join/split</li><li>sort</li><li>reverse</li><li>concat</li><li>indexOf/lastIndexOf</li></ul><div>Особое внимание хочется уделить свойстве <b>length </b>массива.</div><pre style="background: rgba(238,238,238,0.92); color: black;"><span style="font-weight: 700;">var</span> myArray <span style="color: blue;">=</span> [<span style="color: #0066ff;">1</span>, <span style="color: #0066ff;">2</span>, <span style="color: #0066ff;">3</span>]; <br />myArray.<span style="color: #6782d3;">length</span>; <span style="color: #0066ff; font-style: italic;">// It is 3</span><br />myArray.<span style="color: #6782d3;">length</span> <span style="color: blue;">=</span> <span style="color: #0066ff;">4</span>; <br />myArray.<span style="color: #6782d3;">length</span> <span style="color: blue;">=</span> <span style="color: #0066ff;">2</span>; <span style="color: #0066ff; font-style: italic;">// [1, 2]</span><br />myArray[<span style="color: #0066ff;">1000000</span>] <span style="color: blue;">=</span> <span style="color: #0066ff;">4</span>;<br /></pre>Таким образом <b>length = последний индекс массива + 1</b>. Если часть элементов массива не будут инициализированы, то они будут равны undefined. <br /><h3>Функции</h3></div><div>Функции это объекты в Javascript. Поэтому их можно присваивать переменным, передавать и, конечно, у них есть свойства. Существует 3 способа создать функцию. Основное отличие в результате их работы - в том, что именованная функция видна везде, а анонимная - только после объявления.</div><h4>Именнованные</h4><div><pre style="background: rgba(238,238,238,0.92); color: black;">sayAnithing(“Hi<span style="color: blue;">!</span>”);<br /><span style="font-weight: 700;">function</span> <span style="color: #ff8000;">sayAnithing</span>(message) { <span style="color: #3333ff; font-weight: 700;">alert</span>(mesage); }<br /></pre></div><h4>Анонимные</h4><div><pre style="background: rgba(238,238,238,0.92); color: black;"><span style="font-weight: 700;">var</span> <span style="color: #ff8000;">sayBonjour</span> <span style="color: blue;">=</span> <span style="font-weight: 700;">function</span> () { <span style="color: #3333ff; font-weight: 700;">alert</span>(“Bonjour<span style="color: blue;">!</span>”);}<br />sayBonjour(); <span style="color: #0066ff; font-style: italic;">// Says “Bonjour!” </span><br /></pre><h4>Аргументы функции</h4></div><div>Функции можно запускать с любым числом параметров. Если функции передано меньше параметров, чем есть в определении, то отсутствующие считаются undefined.</div><div><pre style="background: rgba(238,238,238,0.92); color: black;">foo(<span style="color: #0066ff;">0</span>, <span style="color: #0066ff;">1</span>, <span style="color: #0066ff;">2</span>, <span style="color: #0066ff;">3</span>, <span style="color: #0066ff;">4</span>); <br /><br /><span style="font-weight: 700;">function</span> <span style="color: #ff8000;">foo</span>(a, b, c) { <br />    arguments[<span style="color: #0066ff;">0</span>] <span style="color: blue;">=</span> <span style="color: #0066ff;">2</span>; <br />    a; <span style="color: #0066ff; font-style: italic;">// 2 </span><br />    b <span style="color: blue;">=</span> <span style="color: #0066ff;">17</span>; <br />    arguments[<span style="color: #0066ff;">1</span>]; <span style="color: #0066ff; font-style: italic;">// 17 </span><br />    arguments[<span style="color: #0066ff;">4</span>]; <span style="color: #0066ff; font-style: italic;">// 4 </span><br />}<br /></pre>Аргументы можно изменять.<br />Одной из любопытных функций является <b>typeof() - которая возвращает тип переменной.</b><br /><pre style="background: rgba(238,238,238,0.92); color: black;"><span style="color: blue;">typeof</span> <span style="color: #9700cc;">undefined</span> <span style="color: #0066ff; font-style: italic;">// "undefined" </span><br /><span style="color: blue;">typeof</span> <span style="color: #0066ff;">0</span>    <span style="color: #0066ff; font-style: italic;">// "number" </span><br /><span style="color: blue;">typeof</span> <span style="color: #9700cc;">true</span> <span style="color: #0066ff; font-style: italic;">// "boolean" </span><br /><span style="color: blue;">typeof</span> <span style="color: #009933;">"foo"</span> <span style="color: #0066ff; font-style: italic;">// "string" </span><br /><span style="color: blue;">typeof</span> {} <span style="color: #0066ff; font-style: italic;">// "object"</span><br /></pre>Специфика языка Javascript: <br /><pre style="background: rgba(238,238,238,0.92); color: black;"><span style="color: blue;">typeof</span> <span style="color: #9700cc;">null</span>  <span style="color: #0066ff; font-style: italic;">// "object"</span><br /><span style="color: blue;">typeof</span> <span style="font-weight: 700;">function</span>(){} <span style="color: #0066ff; font-style: italic;">// "function"</span><br /></pre><h3>Scope и контекст выполнения</h3></div><div>Выполнение JavaScript представляет из себя стэк контекстов выполнения. Контекст, который активирует другой контекст, называется вызывающим контекстом (<b>caller</b>). Контекст, который вызывают, называется вызываемым контекстом (<b>callee</b>). При этом callee-контекст может являться caller’ом для другого callee, что частенько и происходит когда один из одной функции вызывается другая. <br /><pre style="background: rgba(238,238,238,0.92); color: black;"><span style="font-weight: 700;">var</span> color <span style="color: blue;">=</span> “blue”; <span style="color: #0066ff; font-style: italic;">// Global scope</span><br /><span style="font-weight: 700;">function</span> <span style="color: #ff8000;">changeColor</span> () { <span style="color: #0066ff; font-style: italic;">// changeColor scope</span><br />  <span style="font-weight: 700;">var</span> anotherColor <span style="color: blue;">=</span> “red”;<br />    <span style="font-weight: 700;">function</span> <span style="color: #ff8000;">swapColors</span> () { <span style="color: #0066ff; font-style: italic;">// swapColors scope</span><br />      <span style="font-weight: 700;">var</span> tempColor <span style="color: blue;">=</span> anotherColor;<br />      anotherColor <span style="color: blue;">=</span> color;<br />      color <span style="color: blue;">=</span> tempColor;<br />    }<br />    swapColors();  <span style="color: #0066ff; font-style: italic;">// function call</span><br />}<br />changeColor();  <span style="color: #0066ff; font-style: italic;">// function call</span><br /></pre><br />Схема ниже иллюстрирует контекст выполнения функций:  <br /><div class="separator" style="clear: both; text-align: center;"><a href="http://2.bp.blogspot.com/-JkQD5nm6wtI/U5rkqe9m1_I/AAAAAAAABBY/JsYrX9EW0u8/s1600/2014-06-13+15-43-51+%D0%A1%D0%BA%D1%80%D0%B8%D0%BD%D1%88%D0%BE%D1%82+%D1%8D%D0%BA%D1%80%D0%B0%D0%BD%D0%B0.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://2.bp.blogspot.com/-JkQD5nm6wtI/U5rkqe9m1_I/AAAAAAAABBY/JsYrX9EW0u8/s1600/2014-06-13+15-43-51+%D0%A1%D0%BA%D1%80%D0%B8%D0%BD%D1%88%D0%BE%D1%82+%D1%8D%D0%BA%D1%80%D0%B0%D0%BD%D0%B0.png" /></a></div>Переменные видны внутри контекста функции не зависимо где они объявлены. Необычно для новичков в JS выглядит следующий пример: <br /><pre style="background: rgba(238,238,238,0.92); color: black;"><span style="font-weight: 700;">function</span> <span style="color: #ff8000;">myFunc</span> () {<br />  If (<span style="color: #9700cc;">true</span>) {<br />    <span style="font-weight: 700;">var</span> localVar <span style="color: blue;">=</span> “I’m local”;<br />  }<br />  console<span style="color: #3333ff; font-weight: 700;">.log</span>(localVar);  <span style="color: #0066ff; font-style: italic;">//Shows “I’m local” in log</span><br />}<br /></pre><h3>Замыкания </h3></div><div>Замыкание - внутренняя функция. Javascript позволяет создавать функции по ходу выполнения скрипта. И эти функции имеют доступ к переменным внешней функции.</div><div>Рассмотрим пример:</div><div><pre style="background: rgba(238,238,238,0.92); color: black;"><span style="font-weight: 700;">function</span> <span style="color: #ff8000;">Counter</span> () {<br />  <span style="font-weight: 700;">var</span> count <span style="color: blue;">=</span> <span style="color: #0066ff;">0</span>;<br />  <span style="color: blue;">return</span> <span style="font-weight: 700;">function</span> () {<br />    <span style="color: blue;">return</span> <span style="color: blue;">++</span>count;<br />  }<br />}<br /><span style="font-weight: 700;">var</span> increaseCount <span style="color: blue;">=</span> Counter();<br /><span style="color: #3333ff; font-weight: 700;">alert</span>(increaseCount()); <span style="color: #0066ff; font-style: italic;">// Shows 1</span><br /><span style="color: #3333ff; font-weight: 700;">alert</span>(increaseCount()); <span style="color: #0066ff; font-style: italic;">// Shows 2</span><br /></pre>Внутренняя анонимная функция замыкает на себе функцию Counter. Это означает что когда заканчивает работать функция Counter, внутренняя функция остается жить, ее можно запускать в другом месте кода. В этой функции мы используем переменную count, т.е получается что внутренняя функция замыкает на себе переменную count внешней функции. <br /><h3>Прототипы</h3></div><div>В Javascript все объекты наследуют Object, поэтому каждый объект имеет&nbsp;<span style="background-color: white; font-family: verdana, geneva, lucida, 'lucida grande', arial, helvetica, sans-serif; font-size: 13px;">свойство</span><span style="background-color: white; font-family: verdana, geneva, lucida, 'lucida grande', arial, helvetica, sans-serif; font-size: 13px;">&nbsp;</span>prototype. Prototype это объект, которое позволяет шарить свойства с другими объектами.&nbsp;</div><div class="separator" style="clear: both; text-align: center;"><a href="http://3.bp.blogspot.com/-aE93elcAvL4/U5sBdhK_YUI/AAAAAAAABBo/SWEMu8srCJc/s1600/2014-06-13+17-49-12+%D0%A1%D0%BA%D1%80%D0%B8%D0%BD%D1%88%D0%BE%D1%82+%D1%8D%D0%BA%D1%80%D0%B0%D0%BD%D0%B0.png" imageanchor="1" style="margin-left: 1em; margin-right: 1em;"><img border="0" src="http://3.bp.blogspot.com/-aE93elcAvL4/U5sBdhK_YUI/AAAAAAAABBo/SWEMu8srCJc/s1600/2014-06-13+17-49-12+%D0%A1%D0%BA%D1%80%D0%B8%D0%BD%D1%88%D0%BE%D1%82+%D1%8D%D0%BA%D1%80%D0%B0%D0%BD%D0%B0.png" /></a></div><div>Например, когда у объекта свойство &#8220;jump&#8221;, то интерпретатор языка ищет сначала это свойство у самого объекта, а потом спускаясь по цепочке прототипов ищет в них пока не найдет.</div><h3>&#8220;Классы&#8221;</h3><div>В спецификации ECMAScript 5 нет понятия класса. Реализовать класс в привычном понятии для ООП можно путем создания конструктора с прототипом. Принадлежность к классу проверяет оператор <b>instanceof</b></div><div><pre style="background: rgba(238,238,238,0.92); color: black;"><span style="font-weight: 700;">function</span> <span style="color: #ff8000;">Animal</span>(name) {  <span style="color: #0066ff; font-style: italic;">//constructor</span><br />  this.<span style="color: #6782d3;">name</span> <span style="color: blue;">=</span> name;<br />}<br /><br /><span style="color: #3333ff; font-weight: 700;">Animal</span>.<span style="color: #6782d3;">prototype</span>.<span style="color: #ff8000;">speed</span> <span style="color: blue;">=</span> <span style="color: #0066ff;">0</span>;  <span style="color: #0066ff; font-style: italic;">//Property with value by default</span><br /><br /><span style="color: #3333ff; font-weight: 700;">Animal</span>.<span style="color: #6782d3;">prototype</span>.<span style="color: #ff8000;">run</span> <span style="color: blue;">=</span> <span style="font-weight: 700;">function</span>(speed) { <span style="color: #0066ff; font-style: italic;">//Method of prototype</span><br />  this.speed <span style="color: blue;">+</span><span style="color: blue;">=</span> speed;<br />  <span style="color: #3333ff; font-weight: 700;">alert</span>(this.<span style="color: #6782d3;">name</span> <span style="color: blue;">+</span> <span style="color: #009933;">' run, speed'</span> <span style="color: blue;">+</span> this.speed);<br />};<br /></pre><h3>this</h3></div><div>this зависит от контекста вызова. Рассмотрим возможные варианты:</div><h4>this в простом вызове</h4><div>В этом случае this глобальный объект</div><div><pre style="background: rgba(238,238,238,0.92); color: black;"><span style="font-weight: 700;">function</span> <span style="color: #ff8000;">simpleFunction</span> () {<br />  this;<br />}<br /><br />simpleFunction();<br /></pre><h4>this в конструкторе </h4></div><div>В этом случае this - новый объект</div><div><pre style="background: rgba(238,238,238,0.92); color: black;"><span style="font-weight: 700;">function</span> <span style="color: #ff8000;">SimpleConstructor</span> () {<br />  this.someProperty <span style="color: blue;">=</span> “This is some property“;<br />}<br /><br /><span style="font-weight: 700;">var</span> someObject <span style="color: blue;">=</span> <span style="color: blue;">new</span> SimpleConstructor();<br /></pre><h4>this в методе объекта </h4></div><div>В данном примере this это объект country</div><div><pre style="background: rgba(238,238,238,0.92); color: black;"><span style="font-weight: 700;">var</span> country <span style="color: blue;">=</span> {<br />  name: “Sparta”<br />}<br /><br /><span style="font-weight: 700;">var</span> <span style="color: #ff8000;">say</span> <span style="color: blue;">=</span> <span style="font-weight: 700;">function</span> () {<br />  <span style="color: #3333ff; font-weight: 700;">alert</span>(“This is “ <span style="color: blue;">+</span> this.<span style="color: #6782d3;">name</span>);<br />}<br /><br />country.sayName <span style="color: blue;">=</span> say;<br />country.sayName();<br /></pre><h4>this как первый аргумент в call/apply </h4></div><div><pre style="background: rgba(238,238,238,0.92); color: black;"><span style="font-weight: 700;">function</span> <span style="color: #ff8000;">sum</span>(a, b) {<br />  this.result <span style="color: blue;">=</span> a <span style="color: blue;">+</span> b;<br />}<br /><span style="font-weight: 700;">var</span> obj <span style="color: blue;">=</span> {};<br /><br />sum.<span style="color: #3333ff; font-weight: 700;">call</span>(obj, <span style="color: #0066ff;">1</span>, <span style="color: #0066ff;">2</span>);<br /><span style="color: #0066ff; font-style: italic;">// sum.apply(obj, [1, 2]);</span><br /><br /><span style="color: #3333ff; font-weight: 700;">alert</span>(obj.result) <span style="color: #0066ff; font-style: italic;">// Property was created. Result is 3</span><br /></pre><h3>Наследование </h3></div><div>В JS в отличие от других языков программирования реализация наследования как одного из принципов ООП, может быть реализовано несколькими способами. Думаю в данной статье будет излишне описывать каждый из способов, подробно о них можно прочитать в книге:&nbsp;<b>&#8220;Professional JavaScript for Web Developers&#8221;, N. Zakas.</b></div><div><ul><li>Prototype Chaining</li><li>Object Masquerading inheritance</li><li>Combination Inheritance</li><li>Prototypal Inheritance</li><li>Parasitic Inheritance</li><li>Parasitic Combination Inheritance</li></ul><div><h3>Литература</h3></div></div><div><div><ul><li><a href="http://www.ecmascript.org/">http://www.ecmascript.org/</a></li><li><a href="http://javascript.ru/">http://javascript.ru/</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide</a></li><li>Larry Ulman “Modern JavaScript Develop and Design”</li><li>David Flanagan “JavaScript: The Definitive Guide”</li><li>Nicholas C. Zakas “Professional JavaScript for Web Developers”</li></ul></div></div></div>

]]></content>
  </entry>
  
</feed>
